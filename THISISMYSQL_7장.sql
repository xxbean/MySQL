-- DATA TYPE

/* 데이터 타입은 30개 정도 있고 많이 쓰이는 것만 정리
숫자 - INT(정수, 4바이트) - 음수가 필요없으면 뒤에 UNSIGNED
    - SMALL INT(2바이트), BIG INT(8바이트) 숫자의 범위에 따라 다름 
	- FLOAT 실수
    
열에서 데이터를 지정할 같은 숫자라도 데이터 베이스의 공간을 효율적으로 관리할 수 있고
또한 메모리 차리 비율을 줄일 수도 있으므로 데이터 형식으로 해결가능하다 ! 

문자 - CHAR() - 괄호안에 숫자를 적어주면 됩니다. 그럼 그 까지의 글자 저장, 고정 길이 저장
    - VARCHAR() - 는 가변길이문자형 넣은 문자수만큼 저장공간 이용, 변하는 문자를 저장할 때 용이함
    - longtext, longblock 아주 큰 데이터에 용이 
    
longtext, longblock 예를 들어 영화 시나리오 등 긴 것을 위해 !! 

CAHR VARCHAR 모두 영문 한글 관계없이 () 안에 지정된 값으로 저장된다.
전화번호는 - 때문에 문자로 취급하는게 바람직
*/

-- MYSQL의 변수
SET @변수이름 = 변수의 값 #변수저장
SELECT @변수이름 #변수호출
-- 변수는 메모리에 저장댐 ! 
-- 변수는 한꺼번에 실행하는게 좋음 ! 안그러면 날라가
-- limit에는 원래 변수 못씀
prepare MYquery #내 쿼리 준비
-- 요거하고 리미트 쓰면 변수를 넣을 수 있음 


-- 데이터 형식의 변화 
-- CAST 와 CONVERT 이용
CAST 뭔가를 (AS 바꿀형식) -- 이러면 변경 가능
CONVERT (뭔가를 , 바꿀형식) -- 두개 형식만 달라용

CONCAT 은 문자를 이여주는 함수 

--암시적인 형변환 (내부적으로 형변환을 해준다) 위 예시는 면시적인 형변환
ㄷㅌ) SELECT CONCAT('100',200) -- 이러면 정수를 자동으로 문자로 변환해서 도와줌

-- MYSQL 내장함수 중 중요한 것 위주로 레쭈고 

제어흐름함수

SELECT IF (조건문,조건문 참이면 출력,거짓이면 오른쪽 출력)
SELECT IFNULL (NULL<봔환할거) , IFNULL(100,봔한할거) 
-- 수식1이 NULL 이 아ㄴ;면 수식 1 이 반환, 수식 1이 NULL 이면 수식 2가 반환
 SELECT NULLIF -- 수식 1과 2와 같으면 NULL 아니면 수식 1 반환 사용법은 위와 같음

SELCT CASE 수
	when 수 then 반환값 ;
    
SELECT ASCII('문자') --이러면 문자 반환
SELECT CHAR('숫자') -- 해당 문자 반환


1. 숫자 관련 함수
▶ ABS(숫자) - 절대값 출력.
▶ CEILING(숫자) - 값보다 큰 정수 중 가장 작은 수.
▶ FLOOR(숫자) - 값보다 작은 정수 중 가장 큰 수[실수를 무조건 버림(음수일 경우는 제외)].
▶ ROUND(숫자,자릿수) - 숫자를 소수점 이하 자릿수에서 반올림.(자릿수는 양수,0,음수를 갖을 수 있다.)
▶ TRUNCATE(숫자,자릿수) - 숫자를 소수점 이하 자릿수에서 버림.
▶ POW(X,Y) or POWER(X,Y) - X의 Y승
▶ MOD (분자, 분모) - 분자를 분모로 나눈 나머지를 구한다.(연산자 %와 같음)
▶ GREATEST(숫자1,숫자2,숫자3...) - 주어진 수 중 제일 큰 수 리턴.
▶ LEAST(숫자1,숫자2,숫자3...) - 주어진 수 중 제일 작은 수 리턴.
▶ INTERVAL(a,b,c,d.....) - a(숫자)의 위치 반환
2. 문자 관련 함수
▶ ASCII(문자) - 문자의 아스키 코드값 리턴.
▶ CONCAT('문자열1','문자열2','문자열3'...) - 문자열들을 이어준다.
▶ INSERT('문자열','시작위치','길이','새로운문자열') - 문자열의 시작위치부터 길이만큼 새로운 문자열로 대치
▶ REPLACE('문자열','기존문자열','바뀔문자열') - 문자열 중 기존문자열을 바뀔 문자열로 바꾼다.
▶ INSTR('문자열','찾는문자열') - 문자열 중 찾는 문자열의 위치값을 출력
▶ LEFT('문자열',개수) - 문자열 중 왼쪽에서 개수만큼을 추출.
▶ RIGHT('문자열',개수) - 문자열 중 오른쪽에서 개수만큼을 추출.
▶ MID('문자열',시작위치,개수) - 문자열 중 시작위치부터 개수만큼 출력
▶ SUBSTRING('문자열',시작위치,개수) - 문자열 중 시작위치부터 개수만큼 출력
▶ SUBSTRING_index('문자열',뭐를,개수) - 뭐를 개수만큼 찾아서 그 간의 것만 봔환하고 다른 것은 버림 
▶ LTRIM('문자열') - 문자열 중 왼쪽의 공백을 없앤다.
▶ RTRIM('문자열') - 문자열 중 오른쪽의 공백을 없앤다.
▶ TRIM('문자열') - 양쪽 모두의 공백을 없앤다.
▶ LCASE('문자열') or LOWER('문자열') - 소문자로 바꾼다.
▶ UCASE('문자열') or UPPER('문자열') - 대문자로 바꾼다.
▶ REVERSE('문자열') - 문자열을 반대로 나열한다.
▶ REPEAT(숫자,'문자열') - 문자열을 반복
3. 논리 관련 함수
▶ IF(논리식,참일 때 값,거짓일 때 값) - 논리식이 참이면 참일 때 값을 출력하고 논리식이 거짓이면 거짓일 때 출력한다.
▶ IFNULL(값1,값2) - 값1이 NULL 이면 값2로 대치하고 그렇지 않으면 값1을 출력
4. 집계 함수
▶ COUNT(필드명) - NULL 값이 아닌 레코드 수를 구한다.
▶ SUM(필드명) - 필드명의 합계를 구한다.
▶ AVG(필드명) - 각각의 그룹 안에서 필드명의 평균값을 구한다.
▶ MAX(필드명) - 최대값을 구한다.
▶ MIN(필드명) - 최소값을 구한다.
5. 날짜 관련 함수
▶ NOW() or SYSDATE() or CURRENT_TIMESTAMP() - 현재 날짜와 시간 출력
▶ CURDATE() or CURRENT_DATE() -현재 날짜 출력
▶ CURTIME() or CURRENT_TIME() -현재 시간 출력
▶ DATE_ADD(날짜,INTERVAL 기준값) -날짜에서 기준값 만큼 더한다.
※ 기준값 : YEAR, MONTH, DAY, HOUR, MINUTE, SECOND
▶ DATE_SUB(날짜,INTERVAL 기준값) -날짜에서 기준값 만큼 뺸다.
※ 기준값 : YEAR, MONTH, DAY, HOUR, MINUTE, SECOND
▶ YEAR(날짜) -날짜의 연도 출력.
▶ MONTH(날짜) -날짜의 월 출력.
▶ MONTHNAME(날짜) -날짜의 월을 영어로 출력.
▶ DAYNAME(날짜) -날짜의 요일일 영어로 출력.
▶ DAYOFMONTH(날짜) -날짜의 월별 일자 출력.
▶ DAYOFWEEK(날짜) -날짜의 주별 일자 출력(월요일(0),화요일(1)...일요일(6))
▶ WEEKDAY(날짜) -날짜의 주별 일자 출력(월요일(0),화요일(1)...일요일(6))
▶ DAYOFYEAR(날짜) -일년을 기준으로 한 날짜까지의 날 수.
▶ WEEK(날짜) -일년 중 몇 번쨰 주.
▶ FROM_DAYS(날 수) --00년 00월 00일부터 날 수 만큼 경과한 날의 날짜 출력.
▶ TO_DAYS(날짜) --00 년 00 월 00일 부터 날짜까지의 일자 수 출력.
▶ DATE_FORMAT(날짜,'형식') : 날짜를 형식에 맞게 출력

-- 리벗의 구현
SUM , IF 함수만 이용하면 ! 

-- JOIN
INNER JOIN -- 내부조인
SELECT (열목록) -- 여기서 * 쓰면 다 합쳐져용 -- 열 선택할때 중복되는 열이 있으면 어떤테이블.어떤열 형식으로 해줘야 오류 안남 
-- 열목록 앞에 disctint 들어가면 중복되는거 ㄴㄴ 출력
FROM (첫번쨰테이블) -- FROM 테이블이름 별명 하면은 쉽게 쓸 수 있어용 !! 
INNER JOIN 두번쨰 테이블
ON 조인할 조건
WHERE 검색조건 -- where절은 선택입니다 
ORDER BY num -- 요거는 정렬을 위해 이것도 건택가능
-- 그러면 두개가 합쳐집니다 !! 

-- 세개 테이블의 조인
-- 다 그대로고 inner join을 두번쓴면댐 !! ON 도

outer JOIN --외부 조인
-- 조인의 조건에 포함되지 안ㄹ는것도 모두 조인 
SELECT 열 
FROM 테이븡 이름 
(left/right/full) outerjoin 테이블 -- 앞에 셋중 하나 선택, left 는 그냥 포함하는 왼쪽 테이블 조인 ㅈ건 만족안해도 전부 포함해라 !!
ON 조건

CROSS JOIN -- 카어쩌구곱 상호조인
-- 한쪽테이블과 다른 테이블을 모두 조인 , 샘플 데이터 생성시 종종 사용
SELECT 열
	FROM 레비블
	CROSS JOIN 테이블2 ; -- on 구문이 필요가 없어용
SELF JOIN -- 테이블이 하나밖에 없을 때 이용합니다 .. 조직도
UNION ALL -- 그냥 두 결과를 합치는거 -- 열의 개수와 데이터 타입도 비슷해야해 
